let ver="1.5.1";process.stdout.write("\u001bc");const {spawn:s}=require("child_process"),fs=require("fs");var installedDeps=installing=kills=[],lastConsoleFrom,lastErrorTime={},npm={installing:[],install:(a,d,b)=>{npm.installing.push(a);require("child_process").exec((d?"cd "+d+"&&":"")+"npm i "+a+" "+b,c=>{npm.installing[npm.installing.findIndex(e=>e==a)]=void 0;c&&process.stdout.write(c)})}};let help=()=>{console.log("MultiBot by 5UP3R_D1N\n\nHelp you cheat host multiple bots in 1 host! >:D\n\nCommands :\nbots : display bots or interact with bot\n - bots['BOTNAME'].restart : Restart the bot\n - bots['BOTNAME'].terminate : Terminate the bot\n - bots['BOTNAME'].raw : View raw child_process data, Do not modify directly!\nnewbot(folder_name) : Spawn new bot.\nnpm : Parralel npm port to this REPL\n - npm.install(pkg, cwd, opt) : Install new package, more options soon.\n - npm.installing : See whats installing\n\nHow to use :\nSimply put bot folder in this folder, as many folders as you want, it will automatically detect and start.\n\nFeatures :\nBOTNAME: TEXT : Send TEXT to BOTNAME's stdin.\n")};
var checkUpdate=(a=!1)=>{const d=require("https"),b=require("fs"),c=require("url");require("child_process");a||console.log("Checking for update...");d.get(c.parse("https://raw.githubusercontent.com/superdin-inc/MultiBot/main/built.js"),e=>{var g="";e.setEncoding("utf8").on("data",f=>g+=f).on("end",()=>{if(Buffer.from(g).length!=b.readFileSync(require.resolve(process.argv[1])).length){console.log("Updating...");try{b.writeFileSync(require.resolve(process.argv[1]),Buffer.from(g))}catch(f){console.log("Failed to apply new update : "+
f)}}else a||console.log("No update found!")}).on("error",f=>{console.log("Failed to check for update.");throw f;})})},bots={};const dep_regex=/Error: Cannot find module '([a-z0-9@][a-z0-9@\/._-]{0,214})'/m;
var newbot=a=>{console.log("Starting "+a+"...");let d=b=>{installing.includes(a)||(kills.includes(a)&&void 0==kills[kills.findIndex(c=>c==a)],6E4>Date.now()-lastErrorTime[a]?console.log(a+" crashed multiple times within 60 seconds, stopping..."):(console.log(a+" closed unexpectedly, restarting in 5 seconds"),setTimeout(c=>newbot(a),5E3),lastErrorTime[a]=Date.now()))};try{let b=s("node",[process.cwd()+"/"+require("./"+a+"/package.json").main],{cwd:process.cwd()+"/"+a,env:{...process.env,FORCE_COLOR:!0}});
b.stdout.on("data",c=>{lastConsoleFrom!=a&&console.log(" <----- "+a+" -----\x3e");process.stdout.write(c);lastConsoleFrom=a});b.stderr.on("data",c=>{missing=c.toString("utf-8").match(dep_regex);if(null!=missing){console.log('Error: Dependency "'+missing[1]+'" not found, required by '+a+"\n  -- installing in background...");if(installedDeps.includes(missing[1]))return console.error("Error: Already installed this dependency previously.\n  -- Stopping due to suspected failed install.\n  -- Please check that the bot can work properly");
installing.push(a);console.log(a+": Waiting for dependency installation to complete...");require("child_process").exec("cd "+a+"&&npm i --force "+missing[1],e=>{e.stderr?console.log('Error while installing dependency "'+missing[1]+'" : '+e.stderr):console.log('Dependency "'+missing[1]+'" installing done!\nRestarting '+a+"...");installedDeps.push(missing[1]);newbot(a)})}else console.error(c.toString("utf-8"));installing[npm.installing.findIndex(e=>e==a)]=void 0});b.on("close",d);bots[a]={raw:b,terminate:()=>
{bots[a]="Terminated";console.log(a+" have been terminated by user.");kills.push(a);b.kill()},restart:()=>{kills.push(a);b.kill();newbot(a)}};return b}catch(b){console.log("Cannot spawn '"+a+"'"+(process.argv.includes("--debug")?": "+b:"\n  - Run node with --debug to see the detailed error."))}};
(()=>{let a=fs.readdirSync(process.cwd()).filter(b=>!b.endsWith(".js"));console.log("MultiBot v"+ver+" initiating...");checkUpdate();0<a.length?console.log("Bots found : "+a.join(", ")):console.log("No bot found.");a.map(newbot);var d=[];setTimeout(b=>process.stdout.write((0<a.length?"\n":"")+"MultiBot REPL "+ver+"\nhelp() for help\n> "),1E3*a.length);setInterval(()=>checkUpdate(!0),6E4);process.stdin.on("data",b=>{d.push(b.toString("utf-8"));if(d.join("").endsWith("\n")||d.join("").endsWith("\r\n\r"))try{specific=
b.toString("utf-8").match(/^(.+): (.+)/m),null!=specific&&void 0!=bots[specific[1]]?bots[specific[1]].raw.stdin.write(specific[2]):console.log(eval(d.join("")))}catch(c){console.error(c)}process.stdout.write("> ");d=[]})})();
