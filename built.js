let ver="2.2.1",news="Fixed reworked npm spawn glitch on windows\nJust know that calling npm with uppercase is forbidden.";const {Worker:Woorker,isMainThread,parentPort,workerData}=require("node:worker_threads");var wexec=(n="help",...l)=>new Promise((e,c)=>{const d=new Woorker(require.resolve(process.argv[1]),{workerData:[n,l]});d.on("message",e);d.on("error",c);d.on("exit",p=>{0!==p&&c(Error(`${n} stopped with exit code ${p}`))})});
if(isMainThread){process.stdout.write("\u001bc");const {spawn:n}=require("child_process"),l=require("fs"),e=require("repl"),c=require("path");var installedDeps=[],lastConsoleFrom,kills=[],installing=[],lastErrorTime={},npm_cwd,npm_paths=["npm",...Object.keys(process.env).map(a=>process.env[a].split(";").map(f=>l.existsSync(c.join(f,"npm"))?l.existsSync(c.join(f,"npm","npm"))?c.join(f,"npm\t","npm"):c.join(f,"npm"):void 0)).flat(Infinity).filter(a=>void 0!==a)],npm=new Proxy(()=>{n(/^win/.test(process.platform)?
"npm.cmd":"npm",[],{stdio:"inherit"}).on("close",()=>console.log('Please note that commands are in javascript form\n  - "npm install <pkg>" will be "npm.install(\'pkg\')"'))},{get:(a,f)=>{switch(f){case "setCwd":return g=>npm_cwd=c.resolve(g);case "cwd":return()=>npm_cwd;default:if(!npm_cwd)throw Error("npm CWD not set, run npm.setCwd('CWD') to set.");return(...g)=>{let b=0;do try{return 0==b?console.log("Using main npm"):console.log("Using fallbacks from PATH env : "+npm_paths[b]),require("child_process").execSync("cd "+
npm_cwd+"&&"+npm_paths[b]+" "+f+(0<g.length?" ":"")+g.join(" ")),"Executed npm "+f+(0<g.length?" ":"")+g.join(" ")}catch(m){b++}while(b<npm_paths.length)}}}});let d=()=>{console.log("MultiBot by 5UP3R_D1N\n\nHelp you cheat host multiple bots in 1 host! >:D\n\nCommands :\nbots : display bots or interact with bot\n - bots['BOTNAME'].restart() : Restart the bot\n - bots['BOTNAME'].terminate() : Terminate the bot\n - bots['BOTNAME'].raw : View raw child_process data, Do not modify directly!\nnewbot(folder_name) : Spawn new bot.\nnpm : Parralel npm port to this REPL\n - npm() : Get help for npm.\ncheckUpdate() : Check for update, this is automatic, require manual restart.\nwexec('FN_NAME',args...) : Experimental, Execute specific worker.\n\nHow to use :\nSimply put bot folder in this folder, as many folders as you want, it will automatically detect and start.\n\nFeatures :\nBOTNAME: TEXT : Send TEXT to BOTNAME's stdin.\n")};
var checkUpdate=(a=!1)=>{const f=require("https"),g=require("fs"),b=require("url");require("child_process");a||console.log("Checking for update...");f.get(b.parse("https://raw.githubusercontent.com/superdin-inc/MultiBot/main/built.js"),m=>{var h="";m.setEncoding("utf8").on("data",k=>h+=k).on("end",()=>{if(Buffer.from(h).length!=g.readFileSync(require.resolve(process.argv[1])).length){console.log("Updating...");try{g.writeFile(require.resolve(process.argv[1]),Buffer.from(h),k=>process.stdout.write(k?
"Failed to apply new update : "+k.message:"Please restart manually to apply update!")),Object.keys(bots).forEach(k=>bots[k].terminate())}catch(k){console.log("Failed to apply new update : "+k)}}else a||console.log("No update found!")}).on("error",k=>{console.log("Failed to check for update.");throw k;})})},bots={};const p=/Error: Cannot find module '([a-z0-9@][a-z0-9@\/._-]{0,214})'/m;var newbot=(a,f=!1)=>{let g=m=>{installing.includes(a)||(kills.includes(a)&&(kills[kills.findIndex(h=>h==a)]=void 0),
6E4>Date.now()-lastErrorTime[a]?console.log(a+" crashed multiple times within 60 seconds, stopping..."):(console.log(a+" closed unexpectedly, restarting in 5 seconds"),setTimeout(h=>newbot(a),5E3),lastErrorTime[a]=Date.now()))};try{if(l.existsSync("./"+a+"/package.json")){console.log("Starting "+a+"...");var b=n(process.argv[0],[require.resolve("./"+(a+"/"+require("./"+a+"/package.json").main).match(/\/{0,1}(.+)\/{0,1}/m)[1])],{cwd:process.cwd()+"/"+a,env:{...process.env,FORCE_COLOR:!0}});b.stdout.on("data",
m=>{lastConsoleFrom!=a&&console.log(" <----- "+a+" -----\x3e");process.stdout.write(m);lastConsoleFrom=a});b.stderr.on("data",m=>{let h=m.toString("utf-8").match(p);if(null!=h){console.log('Error: Dependency "'+h[1]+'" not found, required by '+a+"\n  -- installing in background...");if(installedDeps.includes(h[1]))return console.error("Error: Already installed this dependency previously.\n  -- Stopping due to suspected failed install.\n  -- Please check that the bot can work properly");installing.push(a);
console.log(a+": Waiting for dependency installation to complete...");require("child_process").exec("cd "+a+"&&npm i --force "+h[1],k=>{k.stderr?console.log('Error while installing dependency "'+h[1]+'" : '+k.stderr):console.log('Dependency "'+h[1]+'" installing done!\nRestarting '+a+"...");installedDeps.push(h[1]);newbot(a)})}else console.error(m.toString("utf-8"))});b.on("close",g);bots[a]={raw:b,terminate:()=>{bots[a]="Terminated";console.log(a+" have been terminated by user.");kills.push(a);b.kill()},
restart:()=>{kills.push(a);b.kill();newbot(a)}};return b}f||console.log(a+" is not a bot(Cannot find package.json).")}catch(m){console.log("Cannot spawn '"+a+"'"+(process.argv.includes("--debug")?": "+m:"\n  - Run node with --debug to see the detailed error."))}};(()=>{let a=l.readdirSync(process.cwd(),{withFileTypes:!0}).filter(b=>b.isDirectory()).map(b=>b.name);console.log("MultiBot v"+ver+" initiating...");process.argv.includes("--no_update")?console.log("  - Update checker disabled with --no_update tag."):
(checkUpdate(),console.log("  - To disable update check, add --no_update on startup"));console.log("\n\nChangelog in v"+ver+" :\n"+news+"\n\n");0<a.length?console.log("Directories found : "+a.join(", ")):console.log("No bot found.");a.forEach(b=>newbot(b,!0));setTimeout(b=>process.stdout.write((0<bots.length?"\n":"")+"\n> repl\nMultiBot REPL v"+ver+"\n --help() for help--\n> "),1E3*bots.length);console.log(process.argv.includes("--no_update")?"Auto update check disabled.":"Auto update will check for update every 5 minutes.");
process.argv.includes("--no_update")||setInterval(()=>checkUpdate(!0),3E5);let f=e.start("> "),g={dir:a,bots,npm,ver:"MultiBot v"+ver,spawn:newbot,newbot,help:d,checkUpdate,wexec,...Object.keys(bots).map(b=>m=>bots[b].raw.stdin.write(m))};Object.keys(g).map(b=>f.context[b]=g[b])})()}else{let n=workerData[0],l=workerData[1],e=workerData[1][0];if(!n)throw Error("Worker name is not specified.");let c={newbotvm:{desc:"run new bot inside Worker's VM",arg_usage:'{[index:"BOT_INDEX",]cwd:"BOT_FOLDER"}',
run:()=>{const d=require("vm"),p=require("fs");if(!l[0].cwd)throw Error("CWD not specified");d.runInNewContext(p.readFileSync(l[0].index||"index.js").toString("utf-8").replace(/require\((.*)\)/,"require('"+l[0].index+"'+$1)"),d.createContext({require}));parentPort.postMessage("VM "+l[0].index+" exited.")}},help:{desc:"display this help",arg_usage:"[cmdname]",run:()=>{!e||Object.keys(c).includes(e)?console.log("MultiBot::v"+ver+"::Worker."+(e?e+".help":"help")+"\n"+(e?` - ${e}\n  - Description :\n${c[e].desc.split("\n").map(d=>
">   "+d).join("\n")}\n  - Usage : wexec('${e}')(${c[e].arg_usage})`:Object.keys(c).map(d=>` - ${d}\n  - Description :\n${c[d].desc.split("\n").map(p=>"    | "+p).join("\n")}\n  - Usage : wexec('${d}')(${c[d].arg_usage})`).join("\n"))):console.log("MultiBot::v"+ver+"::Worker."+e+": Not found");parentPort.postMessage(void 0)}}};if(!Object.keys(c).includes(n))throw Error("Worker "+n+" not found.");c[n].run(...l);parentPort.postMessage("Worker "+n+" exited with no error or result.")};
