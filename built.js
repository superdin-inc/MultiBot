let ver="2.2.0",news="NPM Port reworked\nFixed updater message glitch\nFixed worker help command hang when execute with await\nA bit of patches\nnewbot() now detect if that folder is not a bot, on startup massStart, this warning will be suppressed.";const {Worker:Woorker,isMainThread,parentPort,workerData}=require("node:worker_threads");
var wexec=(h="help",...m)=>new Promise((d,f)=>{const c=new Woorker(require.resolve(process.argv[1]),{workerData:[h,m]});c.on("message",d);c.on("error",f);c.on("exit",a=>{0!==a&&f(Error(`${h} stopped with exit code ${a}`))})});
if(isMainThread){process.stdout.write("\u001bc");const {spawn:h}=require("child_process"),m=require("fs"),d=require("repl");var installedDeps=[],lastConsoleFrom,kills=[],installing=[],lastErrorTime={},npm_cwd,npm=new Proxy(()=>{npm=h(/^win/.test(process.platform)?"npm.cmd":"npm",[],{stdio:"inherit"})},{get:(a,n)=>{switch(n){case "setCwd":return k=>npm_cwd=k;case "cwd":return()=>npm_cwd;default:if(!npm_cwd)throw Error("NPM CWD not set, run npm.setCwd('CWD') to set.");return(...k)=>{h((cwd?"cd "+cwd+
"&&":"")+(/^win/.test(process.platform)?"npm.cmd":"npm"),[n,...k],{stdio:"inherit"});return"Executing npm "+n+" "+k.join(" ")}}}});let f=()=>{console.log("MultiBot by 5UP3R_D1N\n\nHelp you cheat host multiple bots in 1 host! >:D\n\nCommands :\nbots : display bots or interact with bot\n - bots['BOTNAME'].restart : Restart the bot\n - bots['BOTNAME'].terminate : Terminate the bot\n - bots['BOTNAME'].raw : View raw child_process data, Do not modify directly!\nnewbot(folder_name) : Spawn new bot.\nnpm : Parralel npm port to this REPL\n - npm() : Get help for NPM.\ncheckUpdate() : Check for update, this is automatic, require manual restart.\nwexec('FN_NAME',args...) : Experimental, Execute specific worker.\n\nHow to use :\nSimply put bot folder in this folder, as many folders as you want, it will automatically detect and start.\n\nFeatures :\nBOTNAME: TEXT : Send TEXT to BOTNAME's stdin.\n")};
var checkUpdate=(a=!1)=>{const n=require("https"),k=require("fs"),b=require("url");require("child_process");a||console.log("Checking for update...");n.get(b.parse("https://raw.githubusercontent.com/superdin-inc/MultiBot/main/built.js"),l=>{var e="";l.setEncoding("utf8").on("data",g=>e+=g).on("end",()=>{if(Buffer.from(e).length!=k.readFileSync(require.resolve(process.argv[1])).length){console.log("Updating...");try{k.writeFile(require.resolve(process.argv[1]),Buffer.from(e),g=>process.stdout.write(g?
"Failed to apply new update : "+g.message:"Please restart manually to apply update!")),Object.keys(bots).forEach(g=>bots[g].terminate())}catch(g){console.log("Failed to apply new update : "+g)}}else a||console.log("No update found!")}).on("error",g=>{console.log("Failed to check for update.");throw g;})})},bots={};const c=/Error: Cannot find module '([a-z0-9@][a-z0-9@\/._-]{0,214})'/m;var newbot=(a,n=!1)=>{let k=l=>{installing.includes(a)||(kills.includes(a)&&(kills[kills.findIndex(e=>e==a)]=void 0),
6E4>Date.now()-lastErrorTime[a]?console.log(a+" crashed multiple times within 60 seconds, stopping..."):(console.log(a+" closed unexpectedly, restarting in 5 seconds"),setTimeout(e=>newbot(a),5E3),lastErrorTime[a]=Date.now()))};try{if(m.existsSync("./"+a+"/package.json")){console.log("Starting "+a+"...");var b=h(process.argv[0],[require.resolve("./"+(a+"/"+require("./"+a+"/package.json").main).match(/\/{0,1}(.+)\/{0,1}/m)[1])],{cwd:process.cwd()+"/"+a,env:{...process.env,FORCE_COLOR:!0}});b.stdout.on("data",
l=>{lastConsoleFrom!=a&&console.log(" <----- "+a+" -----\x3e");process.stdout.write(l);lastConsoleFrom=a});b.stderr.on("data",l=>{let e=l.toString("utf-8").match(c);if(null!=e){console.log('Error: Dependency "'+e[1]+'" not found, required by '+a+"\n  -- installing in background...");if(installedDeps.includes(e[1]))return console.error("Error: Already installed this dependency previously.\n  -- Stopping due to suspected failed install.\n  -- Please check that the bot can work properly");installing.push(a);
console.log(a+": Waiting for dependency installation to complete...");require("child_process").exec("cd "+a+"&&npm i --force "+e[1],g=>{g.stderr?console.log('Error while installing dependency "'+e[1]+'" : '+g.stderr):console.log('Dependency "'+e[1]+'" installing done!\nRestarting '+a+"...");installedDeps.push(e[1]);newbot(a)})}else console.error(l.toString("utf-8"))});b.on("close",k);bots[a]={raw:b,terminate:()=>{bots[a]="Terminated";console.log(a+" have been terminated by user.");kills.push(a);b.kill()},
restart:()=>{kills.push(a);b.kill();newbot(a)}};return b}n||console.log(a+" is not a bot(Cannot find package.json).")}catch(l){console.log("Cannot spawn '"+a+"'"+(process.argv.includes("--debug")?": "+l:"\n  - Run node with --debug to see the detailed error."))}};(()=>{let a=m.readdirSync(process.cwd(),{withFileTypes:!0}).filter(b=>b.isDirectory()).map(b=>b.name);console.log("MultiBot v"+ver+" initiating...");process.argv.includes("--no_update")?console.log("  - Update checker disabled with --no_update tag."):
(checkUpdate(),console.log("  - To disable update check, add --no_update on startup"));console.log("\n\nChangelog in v"+ver+" :\n"+news+"\n\n");0<a.length?console.log("Directories found : "+a.join(", ")):console.log("No bot found.");a.forEach(b=>newbot(b,!0));setTimeout(b=>process.stdout.write((0<bots.length?"\n":"")+"\n> repl\nMultiBot REPL v"+ver+"\n --help() for help--\n> "),1E3*bots.length);console.log(process.argv.includes("--no_update")?"Auto update check disabled.":"Auto update will check for update every 5 minutes.");
process.argv.includes("--no_update")||setInterval(()=>checkUpdate(!0),3E5);let n=d.start("> "),k={dir:a,bots,npm,ver:"MultiBot v"+ver,spawn:newbot,newbot,help:f,checkUpdate,wexec,...Object.keys(bots).map(b=>l=>bots[b].raw.stdin.write(l))};Object.keys(k).map(b=>n.context[b]=k[b])})()}else{let h=workerData[0],m=workerData[1],d=workerData[1][0];if(!h)throw Error("Worker name is not specified.");let f={newbotvm:{desc:"run new bot inside Worker's VM",arg_usage:'{[index:"BOT_INDEX",]cwd:"BOT_FOLDER"}',
run:()=>{const c=require("vm"),a=require("fs");if(!m[0].cwd)throw Error("CWD not specified");c.runInNewContext(a.readFileSync(m[0].index||"index.js").toString("utf-8").replace(/require\((.*)\)/,"require('"+m[0].index+"'+$1)"),c.createContext({require}));parentPort.postMessage("VM "+m[0].index+" exited.")}},help:{desc:"display this help",arg_usage:"[cmdname]",run:()=>{!d||Object.keys(f).includes(d)?console.log("MultiBot::v"+ver+"::Worker."+(d?d+".help":"help")+"\n"+(d?` - ${d}\n  - Description :\n${f[d].desc.split("\n").map(c=>
">   "+c).join("\n")}\n  - Usage : wexec('${d}')(${f[d].arg_usage})`:Object.keys(f).map(c=>` - ${c}\n  - Description :\n${f[c].desc.split("\n").map(a=>"    | "+a).join("\n")}\n  - Usage : wexec('${c}')(${f[c].arg_usage})`).join("\n"))):console.log("MultiBot::v"+ver+"::Worker."+d+": Not found");parentPort.postMessage(void 0)}}};if(!Object.keys(f).includes(h))throw Error("Worker "+h+" not found.");f[h].run(...m);parentPort.postMessage("Worker "+h+" exited with no error or result.")};
